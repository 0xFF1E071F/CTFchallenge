import sympy
from gmpy2 import gcd,invert
from Crypto.Util.number import long_to_bytes

A=17837832555368308689786098708027973117794970348203719986383141676940062201987761202777419099369816828481341695174601689881519219806887761505932440928699539
C=17837832555368308689786098708027973117794970348203719986383141676940062201987761202777419099369816828481341695174601689881519219806887761505932440928632158
n= 641840878174982655326850312496169636378455577115347500957057267640600977102280072913438154955029114771051709087809927454279064916870408880749853740239718248642560401110078626938726443568692572803490357236810832674229312155746539894173791356805341671586393273678865952155249500341932905426105470392415353610397045835698808163501258474762363712287163328526252399904787053101799058499120606154737990300449437479282435046167055009692493712202386368849122605419812883126887833074654434641607372149411668612504466768080306339558792828063148576123738980431264608446603326193849200810553196864085478463086993422774817059853949748247896512719994166090254440232652496451104455075071560127966288341488523110118075041150491577844082366096788215046025436488554795141938458493258409150407281215473354273599246314944034941237527510171900646139987019380766717951556307441871365874564881565374638513827494801194029940895912077179028101890662760455651864691251980479400416227456995236912364846811949410786643764713673564022863007331006828562341241738846980912184411395632790556038655767763976115640962139547171909279164623846000835333857705944581269631616760405747716520672142021728850694537269211784578408601266217928819863736428173736140161826738813
ed= 534634151124279413732259524933495479098721499860333007593590357554306358799023578194908726136928354695079848972480649724456088941906723794709312712191247045425297126517594344899286925836796680956816064609089090503579894117057252969264121691849003333804607728687046319857910698511132867345476426833313854575436202087209472834349551593011689755514138197238955298350562839877955001729313715223006875793667570760703418551390980455326976431990257513342820095246552412287184147009729875110446230949824384166464485840066906862476445054049749692262294734099027915906839812656254886862402603631321290156949953461665657610306709058617222159635281067103921037090824796905267992798715820128476225045484793453227511548884919811033318570386881936137713666127231317606909893143214808788822341878386939352957962886113639632559883992777992209148001401767753558732492213499792179169681405789041595765504039612494711563472885565786566625643290565526077483663342991770220261962082523632475094223960703649343802215392245948547397211539801128773253646005228684994277460378625729491412757387260415740823541731482803143732545953736392746596116269262129834845033889284145602522548909021358829175225208236295389454408336909318816490014229410357900614079212880259236238467905

def fast_gen_N2(A,C):
    result=1
    for i in range(A-2,C,-1):
        result=(result*i)%A
    return invert(result,A)
N1=1
N2=fast_gen_N2(A,C)
seed1=2019*N1+2020*N2

k=ed-1
x=pow(2,k//(2**6),n)
assert(x!=1)
p=gcd(x-1,n)
q=n//p
if(p>q):
    p,q=q,p
seed2=2020*p-2019*q
if seed2<0:
    seed2=(-1)*seed2
    
_P=sympy.nextprime(seed1)
_Q = sympy.nextprime(seed2)
# print _P
# print _Q
_N=_P*_Q
_E=65537
_D = invert(_E, (_P - 1) * (_Q - 1))
print "p: %d\nq: %d" % (_P, _Q)
print "invert(%d, %d)" % (_E, (_P - 1) * (_Q - 1))
_C=183288709028723976658160448336519698700398459340947322152692016513169599029222514445118399653225032641541100129985101994918772329046946295962244096646038598600865786096896989355554955041779941259413115779915405468832327321189345505283184153652727885422718280179025251186380977491993641792341259672566237363655347151343020354489781675539571788934759950303331075098574759853670802171054084321131703969504258663714257549258635956184694450566287845760701724862418909255930636298209146539578608879672058346906370035692078859844402832322545368347681121504910035471822137023626638953992968941166744998545450662434365836169688461834868137046528403401190395486501502489519341656581057940794141420456022102711505759074332049547354944074402136763186087462931985682293826106916791831371302
# print _D
_M=pow(_C,_D,_N)
print(long_to_bytes(_M))
'''
29980405391237365494597168525833309900267720449837722663797882464292688736399471276643180209621186905684266642360886383187160507504219009609357296973525651439


flag{152ab12f-655a-ce34-98ea-1268acb6e862

invert(65537, 580729003306232585131692824621760045312693075365428283792425165963903826835976535086299509258802565458681759982543545433448818993477513153667119374017585723865436494651205981906482692473977613861627475160760971390929341092408013644242465711815949535356864259555890106510950076340321374815339934119695290910047950573750866839850361980019595886014741111224330712265185465680925241286614358099335233662309884478800285491859524350995855767435374573494562967831289744554985472079193067527684693441343811002074093589779173452029176963754423682887985229159396100896656129876112058047936062251074339560906493436832463082959408150859964391055206924733433150329518600010647329030397240420599278856547872397377939454037219283735603162578978715016363624837912725178060212080427880483380200)
invert(65537, 406456317190145553202548556092503890162599284600800442245435527124461288935574881503684377735550204716197945400051131939416980093669195269605181849907798029780697671246170151983926138514381149688722284390891674828079705863464959837499869065359261309494134211421268428042035177014893252373097310545750057379618125778396364646752493786899045581420601717579661449986856319578776400383420940697734502749826014233305818898477066568065591378595944297888326825502547881628658034909097759983991060575235431241199101314305677818657774150937313017494716590408139722296481283519929317241914106469465818209740144626095993200086095175841538470539499200779902949659455044156751070764749765528834000332124888050839632271013464510893460447976571800713664521382823568859866167733136926766377388581347923194946446531108871266403807683112985438457144573363552666756421864506445722691567803625458909224968291099253995144140256265879288172597620989795068369504628902700877822502818428753545188872137476916151464910188779086778474459175003503015914701594749235230136421554549871609070776069328962070704644594499121443659024587635611674856372994234963191480273373245127242074311726767198685640403503300482448592799630496425570971943277509749886757750677378200)
'''