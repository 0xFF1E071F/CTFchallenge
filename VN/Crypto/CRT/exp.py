import gmpy2
ms = [
    284461942441737992421992210219060544764,
    218436209063777179204189567410606431578,
    288673438109933649911276214358963643204,
    239232622368515797881077917549177081575,
    206264514127207567149705234795160750411,
    338915547568169045185589241329271490503,
    246545359356590592172327146579550739141,
    219686182542160835171493232381209438048
]
cs = [
    273520784183505348818648859874365852523,
    128223029008039086716133583343107528289,
    5111091025406771271167772696866083419,
    33462335595116820423587878784664448439,
    145377705960376589843356778052388633917,
    128158421725856807614557926615949143594,
    230664008267846531848877293149791626711,
    94549019966480959688919233343793910003
]

from functools import reduce


def egcd(a, b):
    if 0 == b:
        return 1, 0, a
    x, y, q = egcd(b, a % b)
    x, y = y, (x - a // b * y)
    return x, y, q


def chinese_remainder(pairs):
    mod_list, remainder_list = [p[0] for p in pairs], [p[1] for p in pairs]
    mod_product = reduce(lambda x, y: x * y, mod_list)
    mi_list = [mod_product // x for x in mod_list]
    mi_inverse = [
        egcd(mi_list[i], mod_list[i])[0] for i in range(len(mi_list))
    ]
    x = 0
    for i in range(len(remainder_list)):
        x += mi_list[i] * mi_inverse[i] * remainder_list[i]
        x %= mod_product
    return x


if __name__ == '__main__':
    print(chinese_remainder([(ms[i], cs[i]) for i in range(8)]))
import hashlib
M = 1

for i in ms:
    M = M * i
i = 0
x = 12431175925347281602787181621395813472901844673463867323407221755149896638775556921840670350836523040364174084172138870165182083241256439053740402973441285493313171581526192996423953064189123895763477747686592721768168928032728918211573946814657717586253882984398324604003109983294702314158196003080371537376

while i < 1e5:
    s = x + int(i) * M

    flag = "flag{" + hashlib.sha256(str(x).encode()).hexdigest() + "}"
    if "4b93deeb" in flag:
        print flag
    i += 1