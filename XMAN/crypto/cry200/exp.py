# 已有 public key 与 encode 得到 plaintext
import rsa
from Crypto.PublicKey import RSA
import base64


def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)


pub = RSA.importKey(open('key.pem').read())
n = (pub.n)
e = (pub.e)
print(n)
print(e)

p = q = 6795799294454170907963733149583528805101773617294621926897912431021967690181463414199405691024966518249372997385374561355765444320490793910028983001987972219244374837246438554770181477742886393361552289005977347441738693188442556924755458356845567097750733361091098467527720773854378514482153281410966602614383088267049241250136741890025952502032947625960289653328997752087733200063936762235921359950885356783850273581873393019976881023836361361375381270068685292249019370592671360804024988774321666131913445766523124387145661693827537004652601561431997072525902503732809218703754317961057365520746038049106963257436913177810990165246283814965800970917435686176787020480380692428931595487159522207385918535328426858733126717372822165878199011940125216789982604758858324736229857278839751244718459047371876192722254938951515284924856628127235448011608547020313741392499310742963088232904325953084038288017915876690338747271658706798224067812909646720113846196038068079295353436699109834893056273658788750701830413220482879333348601847065605687054864576539087931010016814776290115489048116344448112229643353928890575463876870095249251240673146060441244742496764211505734172931073598296151524831148833322261260996119647712408403977124663899911995117103363960248993215945517040655179112719831248743647349459749500763707387151306673838872019494687712513271906835196108566200255666756219263148743960308402192789168150008652828466425297114627538947491155415861405803371620097501952231782351801767342509855971563735633815507908681043618863240530975083350990513856141818006641747564820907856022106455187238939192060651648620916143024742771737672102749902389101174216446342191544935424794443303919860887731506642406520373979333383194302128331966009782951728017900243037629432239582929050276270714636334043130694657211683811124613339053931581902308695654836345265742534001215557351235173193519601150571006979842530765634065031389966701962150584542458836790082739856404832293309205925837387211835018766974899895016140207736723929146231556397092198357372126851556636715570758510924375714378990145014899423950168462365516363799710576922295949432506411327873803839413909970304264005459237934678200298075178606395149113813507180720263441144271387004773018997133317041811207739001585272976659491895525548828002735934881130477434905250461227036969500806162396857497075834711760657793955544623806743068578788650274220137279885201089388599994194654833610340251718724849276569949015139480659114902832053096636573332048404765042964442004269290209261391160815231015240903616752653361982285141158950297036390367957992944541709079637331495835288051017736172946219268979124310219676901814634141994056910249665182493729973853745613557654443204907939100289830019879722192443748372464385547701814777428863933615522890059773474417386931884425569247554583568455670977507333610910984675277207738543785144821532814109666026143830882670492412501367418900259525020329476259602896533289977520877332000639367622359213599508853567838502735818733930199768810238363613613753812700686852922490193705926713608040249887743216661319134457665231243871456616938275370046526015614319970725259025037328092187037543179610573655207460380491069632574369131778109901652462838149658009709174356861767870204803806924289315954871595222073859185353284268587331267173728221658781990119401252167899826047588583247362298572788397512447184590473718761927222549389515152849248566281272354480116085470203137413924993107429630882329043259530840382880179158766903387472716587067982240678129096467201138461960380680792953534366991098348930562736587887507018304132204828793333486018470656056870548645765390879310100168147762901154890481163444481122296433539288905754638768700952492512406731460604412447424967642115057341729310735982961515248311488333222612609961196477124084039771246638999119951171033639602489932159455170406551791127198312487436473494597495007637073871513066738388720194946877125132719068351961085662002556667562192631487439603084021927891681500086528284664252971146275389474911554158614058033716200975019522317823518017673425098559715637356338155079086810436188632405309750833509905138561418180066417475648209078560221064551872389391920606516486209161430247427717376721027499023891011742164463421915449354247944433039198608877315066424065203739793333831943021283319660097829517280179002430376294322395829290502762707146363340431306946572116838111246133390539315819023086956548363452657425340012155573512351731935196011505710069798425307656340650313899667019621505845424588367900827398564048322933092059258373872118350187669748998950161402077367239291462315563970921983573721268515566367155707585109243757143789901450148994239501684623655163637997105769222959494325064113278738038394139099703042640054592379346782002980751786063951491138135071807202634411442713870047730189971333170418112077390015852729766594918955255488280027359348811304774349052504612270369695008061623968574970758347117606577939555446238067430685787886502742201372798852010893885999941946548336103402517187248492765699490151394806591149028320530966365733320484047650429644420042692902092613911608152310152409036167526533619822851411589502970363903
if not p and not q:
    print('Need get p,q')
    exit(0)

d = egcd((p - 1) * (q - 1), e)[2]
if d < 0:
    d += (p - 1) * (q - 1)


key = RSA.construct((n, e, d))    # 如果e较小，e应转化成long型: e = long(e)
key.exportKey()
open("private.pem", "wb").write(key.exportKey())


p = open("private.pem").read()
privkey = rsa.PrivateKey.load_pkcs1(p)
crypto = base64.b64decode(open("flag.b64").read())
message = rsa.decrypt(crypto, privkey)
print(message)
